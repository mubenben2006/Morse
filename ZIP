#include<iostream>
#include<ctime>
using namespace std;
const int MAX = 5001;
const int n = 3200;

int data_1[MAX], data_2[MAX], data_3[MAX], data_tmp[MAX];
int num_1[MAX], num_2[MAX], num_3[MAX];

struct list_node {
	int data;
	list_node* next;
};

struct bucket_node {
	int sum;
	list_node* front;
	list_node* rear;
};

void BubbleSort(int r[], int n)  //冒泡排序 正序n 逆序n^2 
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数

	int pos = n;
	while (pos != 0)
	{
		int bound = pos;
		pos = 0;
		for (int i = 1; i < bound; i++)
		{
			num_compared++;
			if (r[i] > r[i + 1])
			{
				num_moved += 3; //移动次数为3
				r[0] = r[i];
				r[i] = r[i + 1];
				r[i + 1] = r[0];	
				pos = i;
			}
		}
	}

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void InsertSort(int r[], int n)  //插入排序 正序n 逆序n^2 
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数

	for (int i = 2; i <= n; i++)
	{
		num_compared++;
		if (r[i] < r[i - 1])
		{
			num_moved += 2;
			r[0] = r[i];
			int j = i - 1;
			while (r[j] > r[0])
			{
				num_moved++;
				num_compared++;
				r[j + 1] = r[j];
				j--;
			}
			r[j + 1] = r[0];
		}
	}

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void ShellSort(int r[], int n)  //希尔排序 正序n^1.3 逆序n^2 
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数
	
	int d = n / 2;
	while (d >= 1)
	{
		for (int i = d + 1; i <= n; i++)
		{
			num_compared++;
			if (r[i] < r[i - d])
			{
				num_moved += 2;
				r[0] = r[i];
				int j = i - d;
				while (j > 0 && r[j] > r[0])
				{
					num_moved++;
					num_compared++;
					r[j + d] = r[j];
					j -= d;
				}
				r[j + d] = r[0];
			}
		}
		d /= 2;
	}
	
	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

int Partion(int r[], int i, int j, unsigned long long& num_compared, unsigned long long& num_moved)
{
	int pivot = r[i]; //基准值
	num_moved++;
	while (i < j)
	{
		num_moved += 2;
		while ((i < j) && r[j] >= pivot)
		{
			num_compared++;
			j--;
		}  //从右向左找第一个小于基准值的元素
		r[i] = r[j];
		while ((i < j) && r[i] <= pivot)
		{
			num_compared++;
			i++;
		}  //从左向右找第一个大于基准值的元素
		r[j] = r[i];
		num_compared++;
	}
	r[i] = pivot; //将基准值放到正确的位置
	return i; //返回基准值的位置
}

void Qsort(int r[], int i, int j)  //快速排序 正序nlogn 逆序n^2
{
	static unsigned long long num_compared = 0;
	static unsigned long long num_moved = 0;

	if (i < j)
	{
		int pivotloc = Partion(r, i, j, num_compared, num_moved);
		Qsort(r, i, pivotloc - 1);
		Qsort(r, pivotloc + 1, j);
	}

	if (i == 1 && j == n) // 只在第一次调用时输出比较和移动次数
	{
		cout << "比较次数：" << num_compared << endl;
		cout << "移动次数：" << num_moved << endl;
	}
}

void QSort(int r[], int n)
{
	Qsort(r, 1, n);
}

void Sift(int r[], int i, int n, int& num_compared, int& num_moved)  //堆调整
{
	int j = 2 * i; //左孩子
	while (j <= n)
	{
		num_compared += 3;
		if (j < n && r[j] < r[j + 1]) //如果右孩子存在且大于左孩子
			j++;
		if (r[i] >= r[j]) //如果父节点大于等于最大子节点
			break;
		else
		{
			int temp = r[i]; 
			r[i] = r[j]; //交换父节点和最大子节点
			r[j] = temp; //将父节点放到最大子节点
			i = j; //更新i为当前子节点位置
			j = 2 * i; //更新j为新的左孩子位置
			num_moved += 3;
		}
	}
}

void HeapSort(int r[], int n)
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数
	
	for (int i = n / 2; i >= 1; i--)
		Sift(r, i, n, num_compared, num_moved);
	for (int i = n; i > 1; i--)
	{
		r[0] = r[1];
		r[1] = r[i];
		r[i] = r[0];
		Sift(r, 1, i - 1, num_compared, num_moved);
	}

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void Merge(int r[], int r1[], int s, int m, int t, int& num_compared, int& num_moved)
{
	int i = s;
	int j = m + 1;
	int k = s;
	num_compared += 3;
	num_moved++;
	while (i <= m && j <= t)
	{
		num_compared += 2;
		if (r[i] <= r[j])
		{
			r1[k++] = r[i++];
			num_moved++;
		}
		else
		{
			r1[k++] = r[j++];
			num_moved++;
		}
	}
	while (i <= m)
	{
		r1[k++] = r[i++];
		num_moved++;
		num_compared++; 
	}
	while (j <= t)
	{
		r1[k++] = r[j++];
		num_moved++;
		num_compared++;
	}
}

void MergePass(int r[], int r1[], int n, int s, int& num_compared, int& num_moved)
{
	int i = 1;
	num_compared += 2;
	while (i + s <= n)
	{
		num_compared++;
		Merge(r, r1, i, i + s - 1, min(i + 2 * s - 1, n), num_compared, num_moved);
		i += 2 * s;
	}
	if (i <= n) //处理剩余的元素
	{
		for (int j = i; j <= n; j++)
		{
			r1[j] = r[j];
			num_moved++;
		}
	}
}

void MergeSort(int r[], int r1[], int n)
{
    int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数

	int s = 1;
	while (s < n)
	{
		MergePass(r, r1, n, s, num_compared, num_moved);
		s *= 2;
		for (int i = 1; i <= n; i++)
		{
			r[i] = r1[i]; //将r1的内容复制回r
			num_moved++;
		}
	}

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void CountingSort(int r[], int n, int k)
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数

	int j, * c = new int[k + 1], * b = new int[n + 1];
	memset(c, 0, sizeof(int) * (k + 1));
	memset(b, 0, sizeof(int) * (n + 1));

	num_moved += 2 * (n + k);
	for (j = 0; j < n; j++)
	{
		num_moved++;
		num_compared++;
		c[r[j]]++;
	}
	for (j = 1; j <= k; j++)
	{
		num_moved++;
		num_compared++;
		c[j] += c[j - 1];
	}
	for (j = n - 1; j >= 0; j--)
	{
		num_moved++;
		num_compared += 2;
		b[c[r[j]] - 1] = r[j];
		c[r[j]]--;
	}
	for (j = 0; j < n; j++)
	{
		r[j] = b[j];
		num_moved++;
		num_compared++;
	}
	delete[] c, b;

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void BucketSort(int r[], int n, int m)
{
	int num_compared = 0;
	int num_moved = 0;

	list_node* p = new list_node; //链表头指针
	int i, k;
	bucket_node* buckets = new bucket_node[m + 1];
	num_compared += m;
	for (i = 0; i <= m; i++)
	{
		num_compared++;
		num_moved += 3;
		buckets[i].sum = 0;
		buckets[i].front = nullptr;
		buckets[i].rear = nullptr;
	}
	for (i = 0; i < n; i++)
	{
		num_compared++;
		num_moved += 4;
		k = r[i];
		p = new list_node;
		p->data = r[i];
		p->next = nullptr;
		if (buckets[k].sum == 0)
		{
			num_moved += 2;
			num_compared++;
			buckets[k].front = p;
			buckets[k].rear = p;
		}
		else
		{
			num_moved += 2;
			num_compared++;
			buckets[k].rear->next = p;
			buckets[k].rear = p;
		}
		buckets[k].sum++;
	}
	for (i = 0; i < m && buckets[i].sum == 0; i++); //找到第一个非空桶
	{
		num_moved++;
		num_compared++;
		p = buckets[i].front; //获取第一个非空桶的链表头
		for (int j = i + 1; j < m; j++)
		{
			num_compared++;
			if (buckets[j].sum > 0) //如果有下一个非空桶
			{
				num_compared++;
				num_moved += 2;
				buckets[i].rear->next = buckets[j].front; //将当前桶的链表尾连接到下一个非空桶的链表头
				i = j;
			}
		}
	}
	i = 0;
	while (p != nullptr) //遍历链表
	{
		num_moved += 3;
		num_compared++;
		r[i++] = p->data; //将链表中的数据放回原数组
		list_node* temp = p;
		p = p->next; //移动到下一个节点
		delete temp; //释放当前节点
	}
	delete[] buckets; //释放桶数组

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void CountSort(int r[], int n, int exp, int& num_compared, int& num_moved)
{
	int* output = new int[n + 1];
	num_moved += 10 + n;
	int i, buckets[10] = { 0 };
	for (i = 0; i < n; i++)
	{
		buckets[(r[i] / exp) % 10]++;
		num_compared++;
		num_moved++;
	}
	for (i = 1; i < 10; i++)
	{
		buckets[i] += buckets[i - 1];
		num_compared++;
		num_moved++;
	}
	for (i = n - 1; i >= 0; i--)
	{
		output[buckets[(r[i] / exp) % 10] - 1] = r[i];
		buckets[(r[i] / exp) % 10]--;
		num_compared += 2;
		num_moved++;
	}
	for (i = 0; i < n; i++)
	{
		num_compared++;
		num_moved++;
		r[i] = output[i];
	}
	delete[] output;
}

int get_max(int r[], int n, int& num_moved)
{
	int max = r[0];
	for (int i = 1; i < n; i++)
	{
		if (r[i] > max)
		{
			num_moved++;
			max = r[i];
		}
	}
	return max;
}

void RadixSort(int r[], int n)
{
	int num_compared = 0; //比较次数
	int num_moved = 0; //移动次数

	int exp;
	int max = get_max(r, n, num_moved);
	num_compared += 2 * n;
	for (exp = 1; max / exp > 0; exp *= 10)
	{
		CountSort(r, n, exp, num_compared, num_moved);
	}

	cout << "比较次数：" << num_compared << endl;
	cout << "移动次数：" << num_moved << endl;
}

void BubbleSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "BubbleSort 正序：";
	clock_t start1 = clock();
	BubbleSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "BubbleSort 逆序：";
	clock_t start2 = clock();
	BubbleSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "BubbleSort 随机序列";
	clock_t start3 = clock();
	BubbleSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void InsertSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "InsertSort 正序：";
	clock_t start1 = clock();
	InsertSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "InsertSort 逆序：";
	clock_t start2 = clock();
	InsertSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "InsertSort 随机序列";
	clock_t start3 = clock();
	InsertSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void ShellSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "ShellSort 正序：";
	clock_t start1 = clock();
	ShellSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "ShellSort 逆序：";
	clock_t start2 = clock();
	ShellSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "ShellSort 随机序列";
	clock_t start3 = clock();
	ShellSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void QSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "QSort 正序：";
	clock_t start1 = clock();
	QSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "QSort 逆序：";
	clock_t start2 = clock();
	QSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "QSort 随机序列";
	clock_t start3 = clock();
	QSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void HeapSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "HeapSort 正序：";
	clock_t start1 = clock();
	HeapSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "HeapSort 逆序：";
	clock_t start2 = clock();
	HeapSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "HeapSort 随机序列";
	clock_t start3 = clock();
	HeapSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void MergeSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "MergeSort 正序：";
	clock_t start1 = clock();
	MergeSort(data_1, data_tmp, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "MergeSort 逆序：";
	clock_t start2 = clock();
	MergeSort(data_2, data_tmp, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "MergeSort 随机序列";
	clock_t start3 = clock();
	MergeSort(data_3, data_tmp, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void CountingSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "CountingSort 正序：";
	clock_t start1 = clock();
	CountingSort(data_1, n, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "CountingSort 逆序：";
	clock_t start2 = clock();
	CountingSort(data_2, n, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "CountingSort 随机序列";
	clock_t start3 = clock();
	CountingSort(data_3, n, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void BucketSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "Bucketsort 正序：";
	clock_t start1 = clock();
	BucketSort(data_1, n, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "Bucketsort 逆序：";
	clock_t start2 = clock();
	BucketSort(data_2, n, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "Bucketsort 随机序列";
	clock_t start3 = clock();
	BucketSort(data_3, n, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

void RadixSort_test(int num_1[], int num_2[], int num_3[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		data_1[i] = num_1[i];
		data_2[i] = num_2[i];
		data_3[i] = num_3[i];
	}

	cout << "RadixSort 正序：";
	clock_t start1 = clock();
	RadixSort(data_1, n);
	clock_t end1 = clock();
	cout << "运行时间:" << (double)(end1 - start1) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "RadixSort 逆序：";
	clock_t start2 = clock();
	RadixSort(data_2, n);
	clock_t end2 = clock();
	cout << "运行时间:" << (double)(end2 - start2) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;

	cout << "RadixSort 随机序列";
	clock_t start3 = clock();
	RadixSort(data_3, n);
	clock_t end3 = clock();
	cout << "运行时间:" << (double)(end3 - start3) * 1000000 / CLOCKS_PER_SEC << "(μs)" << endl;
}

int main()
{
	srand((unsigned int)time(NULL));

	for (int i = 1; i <= n; i++)
	{
		num_1[i] = i;
		num_2[n - i] = i;
		num_3[i] = rand() % n + 1;
	}
    
	BubbleSort_test(num_1, num_2, num_3, n);
	cout << endl;
	InsertSort_test(num_1, num_2, num_3, n);
	cout << endl;
	ShellSort_test(num_1, num_2, num_3, n);
	cout << endl;
	QSort_test(num_1, num_2, num_3, n);
	cout << endl;
	HeapSort_test(num_1, num_2, num_3, n);
	cout << endl;
	MergeSort_test(num_1, num_2, num_3, n);
	cout << endl;
	CountingSort_test(num_1, num_2, num_3, n);
	cout << endl;
	BucketSort_test(num_1, num_2, num_3, n);
	cout << endl;
	RadixSort_test(num_1, num_2, num_3, n);
	cout << endl;
	return 0;
}
